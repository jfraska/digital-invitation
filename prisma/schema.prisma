// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  
  invitations             Invitation[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([provider, providerAccountId])
}

model Session {
  sessionToken  String      @unique
  userId        String
  expires       DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier    String
  token         String
  expires       DateTime

  @@id([identifier, token])
}

model Template {
  id            String      @default(cuid()) @id
  title         String
  slug          String      @unique
  thumbnail     String
  price         Int
  discount      Int
  category      String      @default("basic")
  content       Json[]
  color         Json[]
  music         String
  published     Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")

  invitation    Invitation?
}

model Invitation {
  id            String      @default(cuid()) @id 
  title         String
  userId        String
  templateId    String?      @unique
  fitur         Json[]
  addon         Json[]
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")

  guests        Guest[]
  payment       Payment?

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  template      Template?    @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId,userId])
}

model Payment {
  id            String      @default(cuid()) @id 
  invitationId  String      @unique
  items         Json[]
  discount      Int         @default(0)
  subTotal      Int
  status        String      @default("pending")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")

  invitation    Invitation    @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@index([invitationId])
}

model Guest {
  id                      String    @id @default(cuid())
  invitationId            String
  number                  String
  name                    String
  additional              Json?
  sosmed                  Json?
  attended                Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  invitation      Invitation    @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@index([invitationId])
}